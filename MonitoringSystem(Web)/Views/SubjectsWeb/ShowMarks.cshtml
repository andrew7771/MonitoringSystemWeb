@model MonitoringSystem_Web_.Models.ModelList
@using MonitoringSystemModel
<link rel="stylesheet" href="~/Content/ShowMarksStyleSheet.css" />
@{
    ViewBag.Title = Model.GroupName + ", " + Model.SubjectName;
}
<h2 class="group-info">@Model.GroupName, @Model.SubjectName</h2>
<div class="wrapper">
    <div id="toggles">
        <input type="checkbox" name="checkbox1" id="checkbox-date-to-mark" class="ios-toggle" checked="checked" />
        <label for="checkbox-date-to-mark" class="checkbox-label" data-off="даты" data-on="оценки"></label>
    </div>
    <div class="btn-group-wrapper">
        <div class="add">
            <a href="#" class="dropdown-toggle customized-primary" data-toggle="dropdown" aria-expanded="true">
                <span class="glyphicon glyphicon-plus"></span>
            </a>
            <ul class="dropdown-menu">
                <li>
                    @Html.RouteLink("Добавить ЛР", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "AddMarkColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Добавить РР", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "AddHomeWorkColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Добавить Модуль", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "AddModuleColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Добавить свободный столбец", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "AddFreeFieldColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
            </ul>
        </div>
        <div class="remove">
            <a href="#" class="dropdown-toggle customized-primary" data-toggle="dropdown" aria-expanded="true">
                <span class="glyphicon glyphicon-minus"></span>
            </a>
            <ul class="dropdown-menu remove-col">
                <li>
                    @Html.RouteLink("Удалить Стоблец ЛР", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "RemoveMarkColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Удалить Столбец РР", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "RemoveHomeWorkColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Удалить столбец Модуль", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "RemoveModuleColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId
               })
                </li>
                <li>
                    @Html.RouteLink("Удалить свободный столбец", "toMarksWeb", new
               {
                   controller = "SubjectsWeb",
                   action = "RemoveFreeFieldColumn",
                   groupId = Model.GroupName,
                   subjectId = Model.SubjectId,
               })
                </li>
            </ul>
        </div>

    </div>
</div>
<table class="table table-bordered table-hover" border="1" cellspacing="0">
    @* ВЕРХ ТАБЛИЦЫ *@
    <thead>
        <tr>
            <th id="group=name">@Model.GroupName</th>
            @{
                if (Model.labMaxPoints.Count != 0)
                {
                    for (int i = 1; i <= Model.labMaxPoints.Max(l => l.LabNumber); i++)
                    {
                        string labNumber = "labnumber_" + i.ToString();
                        <th id=@labNumber>ЛР @i</th>
                    }
                }
                if (Model.hwMaxPoints.Count != 0)
                {
                    for (int i = 1; i <= Model.hwMaxPoints.Max(hw => hw.HWNumber); i++)
                    {
                        string hwNumber = "hwnumber_" + i.ToString();
                        <th id=@hwNumber>РР @i</th>
                    }
                }
                if (Model.moduleMaxPoints.Count != 0)
                {
                    for (int i = 1; i <= Model.moduleMaxPoints.Max(m => m.ModuleNumber); i++)
                    {
                        string moduleNumber = "modulenumber_" + i.ToString();
                        <th id=@moduleNumber>Mодуль @i</th>
                    }
                }
                if (Model.freeMarkFieldMaxPoints.Count != 0)
                {
                    for (int i = 0; i < Model.freeMarkFieldMaxPoints.Max(m => m.FieldNumber); i++)
                    {
                        string freeFieldNumber = "freefieldnumber_" + i.ToString();
                        <th id=@freeFieldNumber>@Model.freeMarkFieldMaxPoints[i].FieldName.ToString()</th>
                    }
                }
            }
            <th>Лекции</th>
            <th>Сумма</th>
            <th>Автомат</th>
        </tr>
        <tr class="maxpoints">
            <th><p id="max-points-title">Максмальные баллы</p></th>
            @{
                if (Model.labMaxPoints.Count != 0)
                {
                    for (int i = 0; i < Model.labMaxPoints.Max(ln => ln.LabNumber); i++)
                    {
                        string currentMaxLabId = Model.labMaxPoints[i].LabMaxPointID.ToString() + "_maxlab";
                        <th class="maxlab">
                            <input class="max-point" type="number" value=@Model.labMaxPoints[i].MaxPoint.ToString() id=@currentMaxLabId>
                        </th>
                    }
                }
                if (Model.hwMaxPoints.Count != 0)
                {
                    for (int i = 0; i < Model.hwMaxPoints.Max(ln => ln.HWNumber); i++)
                    {
                        string currentMaxHWId = Model.hwMaxPoints[i].HWMaxPointID.ToString() + "_maxhw";
                        <th class="maxhw">
                            <input class="max-point" type="number" value=@Model.hwMaxPoints[i].MaxPoint.ToString() id=@currentMaxHWId>
                        </th>
                    }
                }
                if (Model.moduleMaxPoints.Count != 0)
                {
                    for (int i = 0; i < Model.moduleMaxPoints.Max(ln => ln.ModuleNumber); i++)
                    {
                        string currentMaxModuleId = Model.moduleMaxPoints[i].ModuleMaxPointID.ToString() + "_maxmodule";
                        <th class="maxmodule">
                            <input class="max-point" type="number" value=@Model.moduleMaxPoints[i].MaxPoint.ToString() id=@currentMaxModuleId>
                        </th>
                    }
                }
                if (Model.freeMarkFieldMaxPoints.Count != 0)
                {
                    for (int i = 0; i < Model.freeMarkFieldMaxPoints.Max(fr => fr.FieldNumber); i++)
                    {
                        string currentMaxFreeFieldPoint = Model.freeMarkFieldMaxPoints[i].FreeMarkFieldMaxPointID.ToString() + "_maxfreefieldpoint";
                        <th class="maxfreefieldpoint">
                            <input class="max-point" type="number" value=@Model.freeMarkFieldMaxPoints[i].MaxPoint.ToString() id=@currentMaxFreeFieldPoint>
                        </th>
                    }
                }
            }
            <th><p id="maxlectures">@Model.oneItemPoint.ToString().Replace(',', '.')</p></th>
            <th><p id="automat-title">100</p></th>
            <th><p id="ECTS-title">ECTS</p></th>
        </tr>
    </thead>
    <tbody class="tablecontent">
        @for (int i = 0; i < Model.students.Count; i++)
        {
            <tr id=@Model.students[i].RecordBookNumberID.ToString()>
                <td class="name">@Model.students[i].LastName @Model.students[i].FirstName.Substring(0, 1). @Model.students[i].MiddleName.Substring(0, 1)</td>
                @{
                    //Оценки
                    List
                    <Mark>
                        marks = Model.marks.Where(m => m.RecordBookNumberID == Model.students[i].RecordBookNumberID).ToList();
                    // везде заменить на marks.count != 0
                    if (marks.Count > 0)
                    {
                        for (int j = 0; j < Model.marks.Max(l => l.LabNumber); j++)
                        {
                            if (j < marks.Count)
                            {
                                if (marks[j] != null)
                                {
                                    string currentLabId = marks[j].MarkID.ToString() + "_lab";
                                    <td class="lab">
                                        <div class="point-normal">
                                            <input type="number" class="student-point" id=@currentLabId value=@marks[j].TheMark.ToString() />
                                        </div>
                                        <div class="date-process-hidden">
                                            <label>Отчет: </label>
                                            <input type="date" class="point-date-of-report" value=@marks[j].DateOfReport.ToString("yyyy-MM-dd") />

                                            <label>Приложение: </label>
                                            <input type="date" class="point-date-of-program" value=@marks[j].DateOfProgram.ToString("yyyy-MM-dd") />
                                        </div>
                                    </td>
                                }
                            }
                            else
                            {
                                <td>0</td>
                            }
                        }
                    }

                    //домашки
                    List<HomeWork>
                        hws = Model.homeworks
                        .Where(hw => hw.RecordBookNumberID == Model.students[i].RecordBookNumberID).ToList();
                    if (hws.Count > 0)
                    {
                        for (int j = 0; j < Model.homeworks.Max(hw => hw.HWNumber); j++)
                        {
                            if (j < hws.Count)
                            {
                                if (hws[j] != null)
                                {
                                    string currentHwId = hws[j].HomeWorkID.ToString() + "_hw";
                                    <td class="hw">
                                        <div class="point-normal">
                                            <input type="number" class="student-point" id=@currentHwId value=@hws[j].HWPoint.ToString() />
                                        </div>
                                        <div class="date-process-hidden">
                                            <label>Отчет: </label>
                                            <input type="date" class="point-date-of-report" value=@hws[j].DateOfReport.ToString("yyyy-MM-dd") />

                                            <label>Приложение: </label>
                                            <input type="date" class="point-date-of-program" value=@hws[j].DateOfProgram.ToString("yyyy-MM-dd") />
                                        </div>
                                    </td>
                                }
                            }
                            else
                            {
                                <td>0</td>
                            }
                        }
                    }

                    List<Module>
                        modules = Model.modules
                        .Where(m => m.RecordBookNumberID == Model.students[i].RecordBookNumberID).ToList();
                    if (modules.Count > 0)
                    {
                        for (int j = 0; j < Model.modules.Max(m => m.ModuleNumber); j++)
                        {
                            if (j < modules.Count)
                            {
                                if (modules[j] != null)
                                {
                                    string currentModuleId = modules[j].ModuleID.ToString() + "_module";
                                    <td class="module">
                                        <div class="point-module">
                                            <input type="number" class="student-point-module" id=@currentModuleId value=@modules[j].ModulePoint.ToString() />
                                        </div>
                                    </td>
                                }
                            }
                            else
                            {
                                <td>0</td>
                            }
                        }
                    }

                    List<FreeMarkField>
                        freeMarkFields = Model.freeMarkFields
                        .Where(m => m.RecordBookNumberID == Model.students[i].RecordBookNumberID).ToList();
                    if (freeMarkFields.Count > 0)
                    {
                        for (int j = 0; j < Model.freeMarkFields.Max(m => m.FieldNumber); j++)
                        {
                            if (j < freeMarkFields.Count)
                            {
                                if (freeMarkFields[j] != null)
                                {
                                    string currentFreeFieldId = freeMarkFields[j].FreeMarkFieldID.ToString() + "_freemarkfield";
                                    <td class="freemarkfield">
                                        <div class="point-module">
                                            <input type="number" class="student-point-freemarkfield" id=@currentFreeFieldId value=@freeMarkFields[j].FieldPoint.ToString() />
                                        </div>
                                    </td>
                                }
                            }
                            else
                            {
                                <td>0</td>
                            }
                        }
                    }
                    <td class="lectures">
                        <p id="studentAttends">@Model.attendanceAmount[i].ToString().Replace(',', '.')</p>
                    </td>
                    string studentMark = Model.students[i].RecordBookNumberID + "_automat";
                    string studentECTS = Model.students[i].RecordBookNumberID + "_ECTS";
                    <td class="automat">
                        <p id=@studentMark></p>
                    </td>
                    <td class="ECTS">
                        <p id=@studentECTS></p>
                    </td>
                }
            </tr>
                    }
    </tbody>
</table>

<p>
    <input type="button" id="btn-savechanges" class="btn btn-primary btn-lg" value="Сохранить изменения" />
</p>
<p>
    @Html.RouteLink("Править посещаемость", "toMarksWeb", new
{
    controller = "SubjectsWeb",
    action = "EditAttendance",
    groupId = Model.GroupName,
    subjectId = Model.SubjectId
},
    new
    {
        @class = "btn btn-primary btn-sm"
    })
</p>
<div class="modal" id="modal-save-changes">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Изменения сохранены!</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="modal-save-changes-OK">ОК</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/common.js"></script>
    <script>
        (function () {
            var tablecontent = $("tbody.tablecontent").children();
            var arrayOfInputData = []; //массив объектов, который хранит информацию о каждом инпуте, который должен подвергаться редактированию
            var recordBookNumbersList = getRecordBookNumbers(tablecontent); // массив из id студентов группы
            var maxMarksSum = getMaxMarkSum(arrayOfInputData);
            handleDataFromCells(recordBookNumbersList, arrayOfInputData, maxMarksSum);
            for (var i = 0; i < arrayOfInputData.length; i++) {
                var currentInput;
                if (arrayOfInputData[i].rbn === "") {
                    currentInput = $("thead>tr.maxpoints>th." + arrayOfInputData[i].markType + ">input#" + arrayOfInputData[i].inputId);
                    currentInput.on("change", $.proxy(recalculateMaxMarkSumWithStudentsAutomats, currentInput, arrayOfInputData, recordBookNumbersList));
                }
                else {
                    currentInput = $("tbody.tablecontent>tr#" + arrayOfInputData[i].rbn + ">td>div>input#" + arrayOfInputData[i].inputId);
                    currentInput.on("change", $.proxy(recalculateMaxMarkSumWithStudentsAutomats, currentInput, arrayOfInputData, recordBookNumbersList));
                }
            }
            $("#btn-savechanges").bind("click", function () {
                getDatesToSend();
                var dataToSend = arrayOfInputData;
                var url = decodeURI(window.location.href);
                dataToSend.push({ inputId: url });
                dataToSend = JSON.stringify(dataToSend);

                $.ajax({
                    url: "@Url.Action("SaveChanges")",
                    type: "POST",
                    data: dataToSend,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {
                        alert("data has been sent to server");
                    }
                });

                var modal = $("#modal-save-changes").show();

                $("#modal-save-changes-OK").bind("click", function () {
                    modal.hide();
                });
            });
            function getDatesToSend() {
                var moduleInputs = $("tbody.tablecontent>tr#" + recordBookNumbersList[0] + ">td.module");
                var freeFieldInputs = $("tbody.tablecontent>tr#" + recordBookNumbersList[0] + ">td.freemarkfield");
                for (var i = 0; i < recordBookNumbersList.length; i++) {
                    var currentStudent = $("tbody.tablecontent>tr#" + recordBookNumbersList[i]); // currentStudent - строка таблицы для i-го студента
                    var rowLengthAll = currentStudent.children().length;
                    for (var j = 1; j < rowLengthAll - moduleInputs.length - freeFieldInputs.length - 3; j++) {
                        var currentCell = currentStudent[0].children[j];
                        if (currentCell.children.length > 0) {
                            for (var k = 0; k < arrayOfInputData.length; k++) {
                                if (arrayOfInputData[k].inputId === currentCell.children[0].children[0].id) {
                                    arrayOfInputData[k].dateOfReport = currentCell.children[1].children[1].value;
                                    arrayOfInputData[k].dateOfProgram = currentCell.children[1].children[3].value;
                                }
                            }
                        }
                    }
                }
                debugger;
            }
        })();
    </script>
}