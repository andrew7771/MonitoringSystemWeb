@model MonitoringSystem_Web_.Models.ModelListSubjectCPs
@using MonitoringSystemModel
<link rel="stylesheet" href="~/Content/ShowMarksStyleSheet.css" />
<style>
    a .glyphicon-plus:hover {
        color: green;
        text-decoration: none;
    }

    glyphicon-plus, glyphicon-minus {
        cursor: pointer;
    }

    .line-name-p-normal {
        display: block;
        cursor: pointer;
    }

    .line-name-p-hidden {
        display: none;
        width: 0px;
        height: 0px;
    }

    .line-name-input-hidden {
        display: none;
        width: 0px;
        height: 0px;
    }

    .line-name-input-normal {
        display: block;
        text-align: center;
    }

    .save-hidden {
        display: none;
        width: 0px;
        height: 0px;
    }
</style>
@{
    ViewBag.Title = Model.ClassName + " Класс, " + Model.SubjectName;
}
<h2 class="group-info">@Model.ClassName Класс, @Model.SubjectName</h2>
<div class="wrapper">
    <div id="toggles">
        <input type="checkbox" name="checkbox1" id="checkbox-date-to-mark" class="ios-toggle" checked="checked" />
        <label for="checkbox-date-to-mark" class="checkbox-label" data-off="даты" data-on="оценки"></label>
    </div>
    <div class="btn-group-wrapper">
        <div class="add">
            @Html.ActionLink(" ", "AddCpLine", new
            {
                classId = Model.ClassName,
                subjectId = Model.SubjectId
            }, new { @class = "glyphicon glyphicon-plus" })
        </div>
        <div class="remove">
            @Html.ActionLink(" ", "RemoveCpLine", new
            {
                classId = Model.ClassName,
                subjectId = Model.SubjectId
            }, new { @class = "glyphicon glyphicon-minus" })
        </div>

    </div>
</div>
<table class="table table-bordered table-hover" border="1" cellspacing="0">
    <thead>
        <tr class="line-names">
            <th id="group=name">@Model.ClassName Класс</th>
            @{
                foreach (CPLineMaxPoint cpLineMaxPoint in Model.cpLinesMaxPoints)
                {
                    <th>
                        <p class="line-name-p-normal">@cpLineMaxPoint.LineName</p>
                        <input type="text" class="line-name-input-hidden" value="@cpLineMaxPoint.LineName" data-id=@cpLineMaxPoint.CPLineMaxPointID>
                        <span class="save save-hidden">ОК</span>
                    </th>
                }
            }
            <th>Сумма</th>
            <th>Автомат</th>
        </tr>
        <tr class="maxpoints">
            <th><p id="max-points-title">Максмальные баллы</p></th>
            @{
                foreach (CPLineMaxPoint cpLineMaxPoint in Model.cpLinesMaxPoints)
                {
                    string currentMaxLabId = cpLineMaxPoint.CPLineMaxPointID.ToString() + "_maxlab";
                    <th class="maxlab">
                        <input class="max-point" type="number" value="@cpLineMaxPoint.MaxPoint" id=@currentMaxLabId>
                    </th>
                }
            }
            <th><p id="automat-title">100</p></th>
            <th><p id="ECTS-title">ECTS</p></th>
        </tr>
    </thead>
    <tbody class="tablecontent">
        @for (int i = 0; i < Model.schoolKidsToShow.Count; i++)
        {
            <tr id=@Model.schoolKidsToShow[i].SchoolKidId.ToString()>
                <td class="name">@Model.schoolKidsToShow[i].LastName @Model.schoolKidsToShow[i].FirstName.Substring(0, 1). @Model.schoolKidsToShow[i].MiddleName.Substring(0, 1)</td>
                @{
                    //Оценки
                    List
                    <CourseProjectLine>
                        marks = Model.linesToShow.Where(m => m.SchoolKidId == Model.schoolKidsToShow[i].SchoolKidId).ToList();
                    if (marks.Count > 0)
                    {
                        for (int j = 0; j < Model.linesToShow.Max(l => l.LineIndex); j++)
                        {
                            if (j < marks.Count)
                            {
                                if (marks[j] != null)
                                {
                                    string currentLabId = marks[j].CourseProjectLineID.ToString() + "_lab";
                                    <td class="lab">
                                        <div class="point-normal">
                                            <input type="number" class="student-point" id=@currentLabId value=@marks[j].TheMark.ToString() />
                                        </div>                                        
                                    </td>
                                }
                            }
                            else
                            {
                                <td>0</td>
                            }
                        }
                    }

                    string studentMark = Model.schoolKidsToShow[i].SchoolKidId + "_automat";
                    string studentECTS = Model.schoolKidsToShow[i].SchoolKidId + "_ECTS";
                    <td class="automat">
                        <p id=@studentMark></p>
                    </td>
                    <td class="ECTS">
                        <p id=@studentECTS></p>
                    </td>
                }
            </tr>

                    }
    </tbody>
</table>
<p>
    <input type="button" id="btn-savechanges" class="btn btn-primary btn-lg" value="Сохранить изменения" />
</p>
<div class="modal" id="modal-save-changes">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Изменения сохранены!</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="modal-save-changes-OK">ОК</button>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script src="~/Scripts/common.js"></script>
    <script>
        (function () {
            var tablecontent = $("tbody.tablecontent").children();
            var arrayOfInputData = []; //массив объектов, который хранит информацию о каждом инпуте, который должен подвергаться редактированию
            var recordBookNumbersList = getRecordBookNumbers(tablecontent); // массив из id студентов группы
            var maxMarksSum = getMaxMarkSum(arrayOfInputData);
            handleDataFromCells(recordBookNumbersList, arrayOfInputData, maxMarksSum);
            for (var i = 0; i < arrayOfInputData.length; i++) {
                var currentInput;
                if (arrayOfInputData[i].rbn === "") {
                    currentInput = $("thead>tr.maxpoints>th." + arrayOfInputData[i].markType + ">input#" + arrayOfInputData[i].inputId);
                    currentInput.on("change", $.proxy(recalculateMaxMarkSumWithStudentsAutomats, currentInput, arrayOfInputData, recordBookNumbersList));
                }
                else {
                    currentInput = $("tbody.tablecontent>tr#" + arrayOfInputData[i].rbn + ">td>div>input#" + arrayOfInputData[i].inputId);
                    currentInput.on("change", $.proxy(recalculateMaxMarkSumWithStudentsAutomats, currentInput, arrayOfInputData, recordBookNumbersList));

                }
            }
            $(".line-name-p-normal").bind("click", function () {
                $(this).removeClass("line-name-p-normal")
                    .addClass("line-name-p-hidden");
                var inputLineName = $(this).next().removeClass("line-name-input-hidden")
                    .addClass("line-name-input-normal");
                inputLineName.next().removeClass("save-hidden");
            });
            $(".save").bind("click", function () {
                $(this).addClass("save-hidden");
                var inputLineName = $(".line-name-input-normal")
                    .removeClass("line-name-input-normal")
                    .addClass("line-name-input-hidden");
                $(".line-name-p-hidden").removeClass("line-name-p-hidden")
                    .addClass("line-name-p-normal").empty().append(inputLineName[0].value);
                var value = inputLineName[0].value;
                var index = inputLineName[0].dataset.id;
                var url = decodeURI(window.location.href);
                $.ajax({
                    url: "@Url.Action("SaveLineName")",
                    type: "POST",
                    data: JSON.stringify({
                        'value': value,
                        'index': index,
                        'url': url
                    }),
                    dataType: 'json',
                    contentType: 'application/json'
                });
            });
            $("#btn-savechanges").bind("click", function () {
                getDatesToSend();
                var dataToSend = arrayOfInputData;
                var url = decodeURI(window.location.href);
                dataToSend.push({ inputId: url });
                dataToSend = JSON.stringify(dataToSend);

                $.ajax({
                    url: "@Url.Action("SaveChanges")",
                    type: "POST",
                    data: dataToSend,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {
                        alert("data has been sent to server");
                    }
                });
                var modal = $("#modal-save-changes").show();

                $("#modal-save-changes-OK").bind("click", function () {
                    modal.hide();
                });
            });
        })();
    </script>
}